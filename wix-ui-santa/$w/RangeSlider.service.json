{ "name": "RangeSlider",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.ValueMixin",
      "$w.DisabledMixin",
      "$w.HiddenCollapsedMixin",
      "$w.FocusMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "RangeSlider.js" },
  "docs":
    { "summary": "Range Sliders allow users to select a range of values from a given range.",
      "description":
        [ "Range sliders offer site visitors a way to input a range of values by sliding two \"handles\"",
          " along a numeric track. The slider also supports a single \"handle\" mode. ",
          " Range sliders can be used to filter data, or to collect numeric input from site visitors.",
          " For example, you can use a range slider so a site visitor can select a price range for their online ",
          " shopping needs." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "label",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 25,
              "filename": "RangeSlider.js" },
            { "lineno": 36,
              "filename": "RangeSlider.js" } ],
        "docs":
          { "summary": "Sets or gets the label of a range slider.",
            "links": [],
            "examples":
              [ { "title": "Get a range slider's label",
                  "body":
                    [ "let rangeSliderLabel = $w('#myRangeSlider').label; // Set a range value" ],
                  "extra":
                    {  } },
                { "title": "Set a range slider's label",
                  "body":
                    [ "$w('#myRangeSlider').label = \"Set a range value\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "max",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "\"100\"",
        "locations":
          [ { "lineno": 62,
              "filename": "RangeSlider.js" },
            { "lineno": 74,
              "filename": "RangeSlider.js" } ],
        "docs":
          { "summary": "Sets or gets the maximum value on a range slider's track.",
            "links": [],
            "examples":
              [ { "title": "Get a range slider's maximum value",
                  "body":
                    [ "let rangeSliderMax = $w('#myRangeSlider').max; // 100" ],
                  "extra":
                    {  } },
                { "title": "Set a range slider's maximum value",
                  "body":
                    [ "$w('#myRangeSlider').max = 100;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "min",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "\"0\"",
        "locations":
          [ { "lineno": 43,
              "filename": "RangeSlider.js" },
            { "lineno": 55,
              "filename": "RangeSlider.js" } ],
        "docs":
          { "summary": "Sets or gets the minimum value on a range slider's track.",
            "links": [],
            "examples":
              [ { "title": "Get a range slider's minimum value",
                  "body":
                    [ "let rangeSliderMin = $w('#myRangeSlider').min; // 0" ],
                  "extra":
                    {  } },
                { "title": "Set a range slider's minimum value",
                  "body":
                    [ "$w('#myRangeSlider').min = 0;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "prefix",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 199,
              "filename": "RangeSlider.js" },
            { "lineno": 215,
              "filename": "RangeSlider.js" } ],
        "docs":
          { "summary": "Sets or gets the prefix of a range slider's value.",
            "description":
              [ "You can set a range slider's value to have a prefix. For example, you can set a prefix as a type ",
                "of currency, such as '$'.",
                "",
                " > **Note:** To set a `prefix`, [`sliderType`](#sliderType) must be set to \"Stepped\"." ],
            "links": [],
            "examples":
              [ { "title": "Get a range slider's value prefix",
                  "body":
                    [ "let rangeSliderPrefix = $w('#myRangeSlider').prefix; // \"$\"" ],
                  "extra":
                    {  } },
                { "title": "Set a range slider's value prefix",
                  "body":
                    [ "$w('#myRangeSlider').prefix = \"$\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "sliderType",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "\"Continuous\"",
        "locations":
          [ { "lineno": 81,
              "filename": "RangeSlider.js" },
            { "lineno": 105,
              "filename": "RangeSlider.js" } ],
        "docs":
          { "summary": "Sets or gets a range slider's type.",
            "description":
              [ "The `sliderType` can be set to one of the following:",
                "",
                " - `\"Continuous\"`: A continuous range slider allows site visitors to select ",
                "    any value within the range you set. The \"handles\" move smoothly at a step value of 0.1, along ",
                "    the slider's track. ",
                " - `\"Stepped\"`: A stepped range slider only allows users to select specific ",
                "    values within the set range. The \"handles\" move along tick marks displayed underneath the stepped ",
                "    slider's track. The tick marks are based on a step value that can be adjusted by setting ",
                "    the [`step`](#step) property." ],
            "links": [],
            "examples":
              [ { "title": "Get a range slider's type",
                  "body":
                    [ "let rangeSliderType = $w('#myRangeSlider').sliderType; // \"Stepped\"" ],
                  "extra":
                    {  } },
                { "title": "Set a range slider's type",
                  "body":
                    [ "$w('#myRangeSlider').sliderType = \"Stepped\";" ],
                  "extra":
                    {  } },
                { "title": "Toggle a range slider's type",
                  "body":
                    [ "$w('#sliderTypeToggleButton').onClick(()=>{",
                      "    if($w('#myRangeSlider').sliderType === 'Continuous') {",
                      "        $w('#myRangeSlider').sliderType = 'Stepped';",
                      "    }",
                      "    else{",
                      "        $w('#myRangeSlider').sliderType = 'Continuous';",
                      "    }",
                      "})" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "step",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "0.1",
        "locations":
          [ { "lineno": 148,
              "filename": "RangeSlider.js" },
            { "lineno": 165,
              "filename": "RangeSlider.js" } ],
        "docs":
          { "summary": "Sets or gets a range slider's step value.",
            "description":
              [ "The `step` property along with the [`stepType`](#stepType) determines the size of ",
                " each range silder's step and how many step units the slider is divided into. ",
                "",
                " > **Note:** To set the `step` value, [`sliderType`](#sliderType) must be set to \"Stepped\"." ],
            "links": [],
            "examples":
              [ { "title": "Get a range slider's step value",
                  "body":
                    [ "let rangeSliderStep = $w('#myRangeSlider').step; // \"10\"" ],
                  "extra":
                    {  } },
                { "title": "Set a range slider's step value",
                  "body":
                    [ "$w('#myRangeSlider').step = \"10\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "stepType",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "\"Number\"",
        "locations":
          [ { "lineno": 112,
              "filename": "RangeSlider.js" },
            { "lineno": 141,
              "filename": "RangeSlider.js" } ],
        "docs":
          { "summary": "Sets or gets a range slider's step type.",
            "description":
              [ "The `stepType` determines how the range slider's steps work. ",
                " It can be set to one of the following:",
                "",
                " - `\"Number\"`: The number of steps is determined by the [`step`](#step) ",
                "   property's value. For example, suppose a range slider has a [`min`](#min)",
                "   value of `0`, [`max`](#max) value of `10`, and [`step`] value ",
                "   of `5`. There will be 5 steps, meaning each step will be 2 units. ",
                "  ",
                " - `\"Value\"`: The value of each step is equal to the number of units defined by ",
                "    the [`step`] property's value. For example, suppose a slider has",
                "    a [`min`] value of 0, [`max`](#max) value of 10, and [`step`](#step) ",
                "    value of 5. Each step size will be 5 units, meaning there will be two 2 steps. ",
                "",
                " > **Note:** To set the `stepType`, [`sliderType`](#sliderType) must be set to \"Stepped\"." ],
            "links": [],
            "examples":
              [ { "title": "Get a range slider's step type",
                  "body":
                    [ "let rangeSliderStepType = $w('#myRangeSlider').stepType; // \"Number\"" ],
                  "extra":
                    {  } },
                { "title": "Set a range slider's step type",
                  "body":
                    [ "$w('#myRangeSlider').stepType = \"Number\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "suffix",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 204,
              "filename": "RangeSlider.js" },
            { "lineno": 238,
              "filename": "RangeSlider.js" } ],
        "docs":
          { "summary": "Sets or gets the suffix of a range slider's value.",
            "description":
              [ "You can set a range slider's value to have a suffix. For example, you can set a suffix to be a ",
                "unit of measurement, such as 'cm'. ",
                " > **Note:** To set a `suffix`, [`sliderType`](#sliderType) must be set to \"Stepped\"." ],
            "links": [],
            "examples":
              [ { "title": "Get a range slider's value suffix",
                  "body":
                    [ "let rangeSliderSuffix = $w('#myRangeSlider').suffix; // \"%\"" ],
                  "extra":
                    {  } },
                { "title": "Set a range slider's value suffix",
                  "body":
                    [ "$w('#myRangeSlider').suffix = \"%\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type":
          [ "number",
            { "name": "Array",
              "typeParams":
                [ "number" ] } ],
        "locations":
          [ { "lineno": 172,
              "filename": "RangeSlider.js" },
            { "lineno": 192,
              "filename": "RangeSlider.js" } ],
        "docs":
          { "summary": "Sets or gets the value of a range slider.",
            "description":
              [ "The `value` of the range slider can be one of two types:",
                "",
                " - Number: The range slider has one selected `value` and acts as a single slider. ",
                " - Array: The range slider has two selected values: a minimum value, and a maximum value. ",
                " The minimum and maximum values are bound by the [`min`](#min) and the [`max`](#max) of the range slider." ],
            "links": [],
            "examples":
              [ { "title": "Get a range slider's value",
                  "body":
                    [ "let rangeSliderValue = $w('#myRangeSlider').value; // \"[10,50]\"" ],
                  "extra":
                    {  } },
                { "title": "Set a range slider's value",
                  "body":
                    [ "$w('#myRangeSlider').value = [10,50];" ],
                  "extra":
                    {  } },
                { "title": "Toggle a range slider's value type",
                  "body":
                    [ "$w('#valueToggleButton').onClick(()=>{",
                      "    let numberVal = $w('#myRangeSlider').max/2;",
                      "    let arrayVal = [$w('#myRangeSlider').min, $w('#myRangeSlider').max]",
                      "",
                      "    if (typeof ($w('#myRangeSlider').value) === 'object') {",
                      "        $w('#myRangeSlider').value = numberVal;",
                      "    }",
                      "    else {",
                      "        $w('#myRangeSlider').value = arrayVal;",
                      "    }",
                      "})" ],
                  "extra":
                    { "description": "This example demonstrates how to toggle between a range slider with two \"handles\" and a range slider with one \"handle\"." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }