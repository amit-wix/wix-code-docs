{ "name": "Followers",
  "memberOf": "wix-members-backend",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 161,
      "filename": "index.js" },
  "docs":
    { "summary": "The Followers API contains functionality for working with\n[members' followers](https://support.wix.com/en/article/about-the-members-area)\nfrom backend code.",
      "description":
        [ "To use the Followers API, import `{followers}` from the `wix-members-backend` module:",
          "",
          "   ```javascript",
          "   import { followers } from 'wix-members-backend';",
          "   ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "followMember",
        "labels":
          [ "new" ],
        "nameParams": [],
        "params":
          [ { "name": "memberId",
              "type": "string",
              "doc": "Member ID." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "" },
        "locations":
          [ { "lineno": 1,
              "filename": "followMember.js" } ],
        "docs":
          { "summary": "Sets the current member to follow another member, specified by ID.",
            "links": [],
            "examples":
              [ { "title": "Set the current member to follow another member",
                  "body":
                    [ "import { followers } from 'wix-members-backend';",
                      "",
                      "// TODO Fill in sample values.",
                      "/* Sample stringArg value: 'ff61204b-b19a-5cc8-823b-7eed8ae5fc28'",
                      " *",
                      "// TODO This is a JS object (**not** JSON), so keys are written without quotes, and string values are written with single quotes",
                      " * Sample objectArg value:",
                      " * {",
                      " *   name: {",
                      " *     first: 'John',",
                      " *     last: 'Doe'",
                      " *   },",
                      " *   emails: [",
                      " *     {",
                      " *       tag: 'MAIN',",
                      " *       email: 'john.doe@example.com'",
                      " *     }",
                      " *   ]",
                      " * }",
                      " */",
                      "",
                      "export async function addNewFollower(memberId) {",
                      "  try {",
                      "    const followerId = await followers.followMember(memberId);",
                      "",
                      "    // TODO Show some examples of extracting properties from followerId",
                      "    const id = followerId._id;",
                      "    const status = followerId.status;",
                      "    // TODO ...or if the resolved object is an array, extract properties from the 1st item:",
                      "    const firstId = followerId.items[0]._id;",
                      "    const firstStatus = followerId.items[0].status;",
                      "",
                      "    // TODO Write a log message tailored to your use case. Helpful tip: Include followerId if you can",
                      "    console.log('Success! Created/updated followerId:', followerId);",
                      "    return followerId;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "    // Handle the error",
                      "  }",
                      "",
                      "}",
                      "",
                      "// TODO If promise resolves to a string, use this:",
                      "/* Promise resolves to:",
                      " * \"string\"",
                      " */",
                      "",
                      "// TODO ...or if promise resolves to an object, use this:",
                      "/* Promise resolves to:",
                      "// TODO This is JSON, so keys and string values are written with double quotes",
                      " * {",
                      " *   \"foo\": {",
                      " *     \"bar\": \"baz\"",
                      " *   }",
                      " * }",
                      " */",
                      "",
                      "// TODO ...or if promise resolves to void, use this instead:",
                      "/* Promise resolves to void */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }