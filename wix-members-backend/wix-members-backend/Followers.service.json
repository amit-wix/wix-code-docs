{ "name": "Followers",
  "memberOf": "wix-members-backend",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 161,
      "filename": "index.js" },
  "docs":
    { "summary": "The Followers API contains functionality for working with\n[members' followers](https://support.wix.com/en/article/about-the-members-area)\nfrom backend code.",
      "description":
        [ "To use the Followers API, import `{followers}` from the `wix-members-backend` module:",
          "",
          "   ```javascript",
          "   import { followers } from 'wix-members-backend';",
          "   ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "followMember",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "memberId",
              "type": "string",
              "doc": "Member ID." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "" },
        "locations":
          [ { "lineno": 1,
              "filename": "followMember.js" } ],
        "docs":
          { "summary": "Sets the current member to follow another member, specified by ID.",
            "description":
              [ "The `followMember()` function returns a Promise",
                "that resolves when the current member is set to follow the specified member." ],
            "links": [],
            "examples":
              [ { "title": "Set the current member to follow another member",
                  "body":
                    [ "import { followers } from 'wix-members-backend';",
                      "",
                      "// TODO Fill in sample values.",
                      "/* Sample stringArg value: 'ff61204b-b19a-5cc8-823b-7eed8ae5fc28'",
                      " *",
                      "// TODO This is a JS object (**not** JSON), so keys are written without quotes, and string values are written with single quotes",
                      " * Sample objectArg value:",
                      " * {",
                      " *   name: {",
                      " *     first: 'John',",
                      " *     last: 'Doe'",
                      " *   },",
                      " *   emails: [",
                      " *     {",
                      " *       tag: 'MAIN',",
                      " *       email: 'john.doe@example.com'",
                      " *     }",
                      " *   ]",
                      " * }",
                      " */",
                      "",
                      "export async function addNewFollower(memberId) {",
                      "  try {",
                      "    const followerId = await followers.followMember(memberId);",
                      "",
                      "    // TODO Show some examples of extracting properties from followerId",
                      "    const id = followerId._id;",
                      "    const status = followerId.status;",
                      "    // TODO ...or if the resolved object is an array, extract properties from the 1st item:",
                      "    const firstId = followerId.items[0]._id;",
                      "    const firstStatus = followerId.items[0].status;",
                      "",
                      "    // TODO Write a log message tailored to your use case. Helpful tip: Include followerId if you can",
                      "    console.log('Success! Created/updated followerId:', followerId);",
                      "    return followerId;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "    // Handle the error",
                      "  }",
                      "",
                      "}",
                      "",
                      "// TODO If promise resolves to a string, use this:",
                      "/* Promise resolves to:",
                      " * \"string\"",
                      " */",
                      "",
                      "// TODO ...or if promise resolves to an object, use this:",
                      "/* Promise resolves to:",
                      "// TODO This is JSON, so keys and string values are written with double quotes",
                      " * {",
                      " *   \"foo\": {",
                      " *     \"bar\": \"baz\"",
                      " *   }",
                      " * }",
                      " */",
                      "",
                      "// TODO ...or if promise resolves to void, use this instead:",
                      "/* Promise resolves to void */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "listCurrentMemberConnections",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "connectedMemberIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "List of member IDs whose connections to the current member\n will be retrieved." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ { "name": "Array",
                      "typeParams":
                        [ "wix-members-followers-backend.ConnectedMembers" ] } ] },
            "doc": "Fulfilled - List of site members whose connections to the current member were retrieved." },
        "locations":
          [ { "lineno": 1,
              "filename": "listCurrentMemberConnections.js" } ],
        "docs":
          { "summary": "Returns information if provided site members are followers or are followed by the member making the call.",
            "links": [],
            "examples":
              [ { "title": "basic usage",
                  "body":
                    [ "import wixMembersFollowersBackend from \"wix-members-followers-backend\";",
                      "",
                      "export function listCurrentMemberConnections() {",
                      "  const connectedMemberIds = [\"a string\"];",
                      "",
                      "  return wixMembersFollowersBackend",
                      "    .listCurrentMemberConnections(connectedMemberIds)",
                      "    .then((response) => {",
                      "      console.log(response);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "listCurrentMemberFollowers",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "paging",
              "type": "wix-members-backend.Paging",
              "doc": "Pagination options. For more information, see\n [Pagination](https://dev.wix.com/api/rest/getting-started/pagination)." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-members-backend.ListMyMemberFollowersResult" ] },
            "doc": "" },
        "locations":
          [ { "lineno": 8,
              "filename": "listCurrentMemberFollowers.js" } ],
        "docs":
          { "summary": "Returns IDs of members who follow the member making the call",
            "links": [],
            "examples":
              [ { "title": "basic usage",
                  "body":
                    [ "import wixMembersFollowersBackend from \"wix-members-followers-backend\";",
                      "",
                      "export function listCurrentMemberFollowers() {",
                      "  const paging = {",
                      "    limit: 42,",
                      "    skip: 42",
                      "  };",
                      "",
                      "  return wixMembersFollowersBackend",
                      "    .listCurrentMemberFollowers(paging)",
                      "    .then((response) => {",
                      "      console.log(response);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "listCurrentMemberFollowing",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "paging",
              "type": "wix-members-backend.Paging",
              "doc": "Pagination options. For more information, see\n [Pagination](https://dev.wix.com/api/rest/getting-started/pagination)." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-members-backend.ListMyMemberFollowingResult" ] },
            "doc": "" },
        "locations":
          [ { "lineno": 8,
              "filename": "listCurrentMemberFollowing.js" } ],
        "docs":
          { "summary": "Returns IDs of members followed by the member making the call",
            "links": [],
            "examples":
              [ { "title": "basic usage",
                  "body":
                    [ "import wixMembersFollowersBackend from \"wix-members-followers-backend\";",
                      "",
                      "export function listCurrentMemberFollowing() {",
                      "  const paging = {",
                      "    limit: 42,",
                      "    skip: 42",
                      "  };",
                      "",
                      "  return wixMembersFollowersBackend",
                      "    .listCurrentMemberFollowing(paging)",
                      "    .then((response) => {",
                      "      console.log(response);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "listMemberConnections",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "connectedMemberIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "List of member IDs whose connections to the requested member\n will be retrieved.\n For multiple connections, format as\n `?connectedMemberIds=member-1-id&connectedMemberIds=member-2-id`." },
            { "name": "memberId",
              "type": "string",
              "doc": "ID of the requested member." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ { "name": "Array",
                      "typeParams":
                        [ "wix-members-backend.ConnectedMembers_3248755667" ] } ] },
            "doc": "Fulfilled - List of site members whose connections to the requested member were retrieved." },
        "locations":
          [ { "lineno": 1,
              "filename": "listMemberConnections.js" } ],
        "docs":
          { "summary": "Lists a member's follower or following connections to the other members specified in the request.",
            "description":
              [ "> Note: If no other members' IDs (`connectedMemberIds`) are passed, the call will return successful, but with no data." ],
            "links": [],
            "examples":
              [ { "title": "basic usage",
                  "body":
                    [ "import wixMembersFollowersBackend from \"wix-members-followers-backend\";",
                      "",
                      "export function listMemberConnections() {",
                      "  const connectedMemberIds = [\"a string\"];",
                      "  const memberId = \"a string\";",
                      "",
                      "  return wixMembersFollowersBackend",
                      "    .listMemberConnections(connectedMemberIds, memberId)",
                      "    .then((response) => {",
                      "      console.log(response);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "customLabels":
              [ { "id": "maturity-beta" } ] } },
      { "name": "listMemberFollowers",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "memberId",
              "type": "string",
              "doc": "Member ID." },
            { "name": "paging",
              "type": "wix-members-backend.Paging_69529131",
              "doc": "Pagination options. For more information, see\n [Pagination](https://dev.wix.com/api/rest/getting-started/pagination)." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-members-backend.ListMemberFollowersResult_2722969542" ] },
            "doc": "" },
        "locations":
          [ { "lineno": 8,
              "filename": "listMemberFollowers.js" } ],
        "docs":
          { "summary": "Lists members who follow the requested member.",
            "links": [],
            "examples":
              [ { "title": "basic usage",
                  "body":
                    [ "import wixMembersFollowersBackend from \"wix-members-followers-backend\";",
                      "",
                      "export function listMemberFollowers() {",
                      "  const memberId = \"a string\";",
                      "  const paging = {",
                      "    limit: 42,",
                      "    skip: 42",
                      "  };",
                      "",
                      "  return wixMembersFollowersBackend",
                      "    .listMemberFollowers(memberId, paging)",
                      "    .then((response) => {",
                      "      console.log(response);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "customLabels":
              [ { "id": "maturity-beta" } ] } },
      { "name": "listMemberFollowing",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "memberId",
              "type": "string",
              "doc": "Member ID." },
            { "name": "paging",
              "type": "wix-members-backend.Paging_69529131",
              "doc": "Pagination options. For more information, see\n [Pagination](https://dev.wix.com/api/rest/getting-started/pagination)." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-members-backend.ListMemberFollowingResult_320169290" ] },
            "doc": "" },
        "locations":
          [ { "lineno": 8,
              "filename": "listMemberFollowing.js" } ],
        "docs":
          { "summary": "Lists members who are followed by the requested member.",
            "links": [],
            "examples":
              [ { "title": "basic usage",
                  "body":
                    [ "import wixMembersFollowersBackend from \"wix-members-followers-backend\";",
                      "",
                      "export function listMemberFollowing() {",
                      "  const memberId = \"a string\";",
                      "  const paging = {",
                      "    limit: 42,",
                      "    skip: 42",
                      "  };",
                      "",
                      "  return wixMembersFollowersBackend",
                      "    .listMemberFollowing(memberId, paging)",
                      "    .then((response) => {",
                      "      console.log(response);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "customLabels":
              [ { "id": "maturity-beta" } ] } },
      { "name": "unfollowMember",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "memberId",
              "type": "string",
              "doc": "Member ID." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "" },
        "locations":
          [ { "lineno": 1,
              "filename": "unfollowMember.js" } ],
        "docs":
          { "summary": "Sets the current member to unfollow another member.",
            "links": [],
            "examples":
              [ { "title": "basic usage",
                  "body":
                    [ "import wixMembersFollowersBackend from \"wix-members-followers-backend\";",
                      "",
                      "export function unfollowMember() {",
                      "  const memberId = \"a string\";",
                      "",
                      "  return wixMembersFollowersBackend",
                      "    .unfollowMember(memberId)",
                      "    .then((response) => {",
                      "      console.log(response);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }