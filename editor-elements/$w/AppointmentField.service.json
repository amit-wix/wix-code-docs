{ "name": "AppointmentField",
  "memberOf": "$w",
  "mixes":
    [ "$w.FormElement",
      "$w.HiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.FocusMixin",
      "$w.ClickableMixin",
      "$w.RequiredMixin" ],
  "labels":
    [ "new" ],
  "location":
    { "lineno": 1,
      "filename": "AppointmentField.js" },
  "docs":
    { "summary": "An `AppointmentField` is used to select a date, time and timezone to schedule an appointment.",
      "description":
        [ "Learn more about [adding a breadcrumbs element](https://support.wix.com/en/article/wix-editor-adding-and-setting-up-breadcrumbs) to your site." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "dateTimeRanges",
        "labels": [],
        "get": true,
        "set": true,
        "type": "$w.AppointmentField.dateTimeRangeInfo",
        "locations":
          [ { "lineno": 266,
              "filename": "AppointmentField.js" },
            { "lineno": 284,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Sets or gets a list of dates and times that can be selected.",
            "description":
              [ "Setting the `dateTimeRanges` property sets a list of dates and times that can be selected from the appointment field's date and time dropdown elements. Times can be specified for any timezone and are displayed according to the value in the timezone dropdown.",
                "",
                "Getting the `dateTimeRanges` property returns the list of dates and times that were set for the appointment field. The returned dates and times are according the browser's locale and timezone.",
                "",
                ">**Note:** Setting `dateTimeRanges` overrides the settings panel in the editor for enabled times and enabled date ranges. Dates that have been disabled in the editor are not overridden." ],
            "links": [],
            "examples":
              [ { "title": "Set an appointment field's time ranges",
                  "body":
                    [ "const myEnabledDates = [",
                      "  {",
                      "    \"startDateTime\": new Date(\"2022-03-28T20:00-0500\"),",
                      "    \"endDateTime\": new Date(\"2022-03-28T21:00-0500\")",
                      "  },",
                      "  {",
                      "    \"startDateTime\": new Date(\"2022-03-29T20:00-0500\"),",
                      "    \"endDateTime\": new Date(\"2022-03-29T21:00-0500\")",
                      "  },",
                      "  {",
                      "    \"startDateTime\": new Date(\"2022-03-30T13:30-0500\"),",
                      "    \"endDateTime\": new Date(\"2022-03-30T15:27-0500\")",
                      "  },",
                      "  {",
                      "    \"startDateTime\": new Date(\"2022-03-30T20:15-0500\"),",
                      "    \"endDateTime\": new Date(\"2022-03-30T22:00-0500\")",
                      "  }",
                      "]",
                      "",
                      "$w('#myAppointmentField').dateTimeRanges = {",
                      "  type: 'enabledRanges',",
                      "  payload: myEnabledDates,",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Get an appointment field's time ranges",
                  "body":
                    [ "let myDateTimeRanges = $w(\"#myAppointmentField\").dateTimeRanges",
                      "",
                      "/* myDateTimeRanges:",
                      " *",
                      " * {",
                      " *   \"type\": \"enabledRanges\",",
                      " *   \"payload\": [",
                      " *     {",
                      " *       \"startDateTime\": \"Tue Mar 29 2022 10:00:00 GMT+0900 (Japan Standard Time)\",",
                      " *       \"endDateTime\": \"Tue Mar 29 2022 11:00:00 GMT+0900 (Japan Standard Time)\"",
                      " *     },",
                      " *     {",
                      " *       \"startDateTime\": \"Wed Mar 30 2022 10:00:00 GMT+0900 (Japan Standard Time)\",",
                      " *       \"endDateTime\": \"Wed Mar 30 2022 11:00:00 GMT+0900 (Japan Standard Time)\"",
                      " *     },",
                      " *     {",
                      " *       \"startDateTime\": \"Thu Mar 31 2022 03:30:00 GMT+0900 (Japan Standard Time)\",",
                      " *       \"endDateTime\": \"Thu Mar 31 2022 05:27:00 GMT+0900 (Japan Standard Time)\"",
                      " *     },",
                      " *     {",
                      " *       \"startDateTime\": \"Thu Mar 31 2022 10:15:00 GMT+0900 (Japan Standard Time)\",",
                      " *       \"endDateTime\": \"Thu Mar 31 2022 12:00:00 GMT+0900 (Japan Standard Time)\"",
                      " *     }",
                      " *   ]",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "disabledDaysOfWeek",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "number" ] },
        "locations":
          [ { "lineno": 222,
              "filename": "AppointmentField.js" },
            { "lineno": 241,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Sets or gets a list of days in the week that are not selectable.",
            "description":
              [ "Setting the `disabledDaysOfWeek` property sets a list of days of the week that cannot be select in the appointment field's date element.",
                "",
                "Getting the `disabledDaysOfWeek` property returns the current list of disabled days of the week.",
                "",
                "Sunday = 0;" ],
            "links": [],
            "examples":
              [ { "title": "Get an appointment field's schedulingNotice property",
                  "body":
                    [ "let disabledDays = $w(\"#myAppointmentField\").disabledDaysOfWeek; // [0, 2]" ],
                  "extra":
                    {  } },
                { "title": "Set an appointment field's schedulingNotice property",
                  "body":
                    [ "$w(\"#myAppointmentField\").disabledDaysOfWeek = [0, 2];" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "displayTimeZone",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 61,
              "filename": "AppointmentField.js" },
            { "lineno": 78,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Sets or gets the display time zone dropdown value.",
            "description":
              [ "Setting the `displayTimeZone` property sets the value in the timezone dropdown. Use an [IANA timezone string ](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) to set the `displayTimeZone` property.  ",
                "",
                " Setting the `displayTimeZone` property updates the time values in the time dropdown for the selected timezone. The [`value`](#value) property always returns the date and time value according to the browser's timezone." ],
            "links":
              [ "[value](#value)" ],
            "examples":
              [ { "title": "Get an appointment field's displayTimeZone property",
                  "body":
                    [ "let timeZone = $w(\"#myAppointmentField\").visitorTimeZone  // \"Pacific/Auckland\"" ],
                  "extra":
                    {  } },
                { "title": "Set an appointment field's displayTimeZone property",
                  "body":
                    [ "$w(\"#myAppointmentField\").visitorTimeZone = 'Pacific/Auckland';" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "maxDate",
        "labels": [],
        "get": true,
        "set": false,
        "type": "Date",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 85,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Sets or gets the latest date that a site visitor can select.",
            "description":
              [ "Setting the `maxDate` property prevents site visitors from selecting",
                "dates past the maximum date.",
                "",
                "Set `maxDate` to `undefined` to remove the",
                "current maximum date limitation.",
                "",
                "Getting the `maxDate` property returns the current maximum",
                "date that a site visitor can select." ],
            "links":
              [ "[minDate](#minDate)" ],
            "examples":
              [ { "title": "Get an appointment field's maximum date",
                  "body":
                    [ "let appointmentMaxDate = $w(\"#myAppointmentField\").maxDate;",
                      "",
                      "let maxStr = appointmentMaxDate.toDateString(); // \"Fri Feb 11 2022\"" ],
                  "extra":
                    {  } },
                { "title": "Set an appointment field's maximum date to today",
                  "body":
                    [ "$w(\"#myAppointmentField\").maxDate = new Date();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "minDate",
        "labels": [],
        "get": true,
        "set": true,
        "type": "Date",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 115,
              "filename": "AppointmentField.js" },
            { "lineno": 138,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Sets or gets the earliest date that a site visitor can select.",
            "description":
              [ "Setting the `minDate` property prevents site visitors from selecting",
                "dates before the minimum date.",
                "",
                "Set `minDate` to `undefined` to remove the current minimum date limitation.",
                "",
                "Getting the `minDate` property returns the current minimum",
                "date that a site visitor can select." ],
            "links":
              [ "[maxDate](#maxDate)" ],
            "examples":
              [ { "title": "Get an appointment field's minimum date",
                  "body":
                    [ "let appointmentMaxDate = $w(\"#myAppointmentField\").maxDate;",
                      "",
                      "let maxStr = appointmentMaxDate.toDateString(); // \"Fri Feb 11 2022\"" ],
                  "extra":
                    {  } },
                { "title": "Set an appointment field's minimum date to today",
                  "body":
                    [ "$w(\"#myAppointmentField\").maxDate = new Date();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "schedulingNotice",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "0",
        "locations":
          [ { "lineno": 170,
              "filename": "AppointmentField.js" },
            { "lineno": 190,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Sets or gets the minimum amount of time before an appointment starts, that its time slot is displayed.",
            "description":
              [ "Setting the `schedulingNotice` property sets the minimum number of hours before an appointment starts, that it's displayed in the date and time elements. For example, by setting `schedulingNotice` to 24, only appointments that start 1 day from now are displayed.",
                "",
                "Getting the `schedulingNotice` property returns the minimum number of hours before an appointment that it is displayed.",
                "",
                "`schedulingNotice` can be set from 0 to 240 hours. Setting `schedulingNotice` to 0 displays all appointments." ],
            "links": [],
            "examples":
              [ { "title": "Get an appointment field's schedulingNotice property",
                  "body":
                    [ "$w(\"#myAppointmentField\").schedulingNotice = 24;" ],
                  "extra":
                    {  } },
                { "title": "Set an appointment field's schedulingNotice property",
                  "body":
                    [ "const schedulingNoticeHours = $w(\"#myAppointmentField\").schedulingNotice;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "timeIncrements",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "15",
        "locations":
          [ { "lineno": 144,
              "filename": "AppointmentField.js" },
            { "lineno": 164,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Sets the interval between the times displayed in the time dropdown.",
            "description":
              [ "Setting the `timeIncrements` property sets the interval between the times displayed in the appointment field's time dropdown. For example setting `timeIncrements` to 15 displays times every 15 minutes.",
                "",
                "Getting the `timeIncrements` property returns the interval between the times displayed in the appointment field's time dropdown.",
                "",
                "Increments can be set from 1 to 60." ],
            "links": [],
            "examples":
              [ { "title": "Get an appointment field's timeIncrements",
                  "body":
                    [ "const myIntervals = $w(\"#myAppointmentField\").timeIncrements; // 30" ],
                  "extra":
                    {  } },
                { "title": "Set an appointment field's timeIncrements",
                  "body":
                    [ "$w(\"#myAppointmentField\").timeIncrements = 30;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "useAmPmFormat",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "defaultValue": "true",
        "locations":
          [ { "lineno": 196,
              "filename": "AppointmentField.js" },
            { "lineno": 214,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Sets or gets the time format.",
            "description":
              [ "Setting the `useAmPmFormat` property to `true` sets the time appointment field's time to 12-hour format. Setting `useAmPmFormat` to `false` sets the time to 24-hour format.",
                "",
                "Getting the `useAmPmFormat` property returns the current format for displaying the time." ],
            "links": [],
            "examples":
              [ { "title": "Get an appointment field's schedulingNotice property",
                  "body":
                    [ "const appointmentMinDate = $w(\"#myAppointmentField\").useAmPmFormat;" ],
                  "extra":
                    {  } },
                { "title": "Set an appointment field's schedulingNotice property",
                  "body":
                    [ "$w(\"#myAppointmentField\").useAmPmFormat = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "Date",
        "locations":
          [ { "lineno": 23,
              "filename": "AppointmentField.js" },
            { "lineno": 55,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Sets or gets the date and time values of the appointment field.",
            "description":
              [ "Setting the `value` property sets the date and time displayed in the appointment field element. ",
                " Getting the `value` property gets the date and time according the browser's locale and timezone.",
                " ",
                " Set and get the timezone using the `displayTimeZone` property.",
                "",
                "> **Notes:**",
                " > + Changing a date appointment field's `value` in code doesn't trigger an `onChange` event.",
                ">",
                ">",
                "> + If a appointment field is connected to a dataset, setting the appointment field's `value`",
                ">   in code doesn't set the value of the connected field in the dataset.",
                ">   That means if you use the dataset to perform a submit, the value changed",
                ">   in code isn't reflected in the submitted item.",
                ">",
                ">",
                "> + To submit the new value using a dataset, set the field's value using the",
                ">   [`setFieldValue()`](wix-dataset.html#setFieldValue) function before",
                ">   performing the submit." ],
            "links":
              [ "[displayTimeZone](#displayTimeZone)" ],
            "examples":
              [ { "title": "Get an appointment field's date amd time value and format it",
                  "body":
                    [ "const dateValue = $w('#myAppointmentField').value; // Thu Mar 31 2022 12:45:00 GMT-0500 (Eastern Standard Time)",
                      "",
                      "const localeValue = dateValue.toLocaleDateString('en-US'); // 3/31/2022",
                      "const stringValue = dateValue.toDateString(); // Thu Mar 31 2022",
                      "const myTime = `${dateValue.getHours()}:${dateValue.getMinutes()}`;// 12:45",
                      "const dispalyTimezone= dateValue.visitorTimeZone; // Asia/Tokyo" ],
                  "extra":
                    {  } },
                { "title": "Set an appointment field's date and time value",
                  "body":
                    [ "$w(\"#myAppointmentField\").value = new Date(\"2022-04-13T15:30\");" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onViewChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.AppointmentFieldEventHandler",
              "doc": "Name of the function or\n the function expression to trigger when the date picker's view changes." },
            { "name": "operation",
              "type": "$w.AppointmentFieldOperation",
              "doc": "Name of an async operation. The operation result is passed to the handler.",
              "optional": true },
            { "name": "timeout",
              "type": "number",
              "doc": "Number of seconds to await the operation. If the operation doesn't resolve before the timeout, the operation resolves to an error.",
              "optional": true } ],
        "ret":
          { "type": "$w.AppointmentFieldEventHandler",
            "doc": "The date picker event object." },
        "locations":
          [ { "lineno": 18,
              "filename": "ApppointmentFieldEvnet.js" } ],
        "docs":
          { "summary": "Adds an event handler that triggers when the date picker's view changes.",
            "description":
              [ "When a site visitor views a new month or year in the date picker, the event handler is triggered. ",
                " Selecting a new day in the current month doesn't trigger the event handler, as the month in view doesn't change. ",
                " ",
                " Note that each time a site visitor enters the date picker, they initiate the view, triggering the event handler." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "eventType": "onViewChange" } },
      { "name": "reset",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 290,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Resets the appointment field to its original values.",
            "description":
              [ "The `reset()` function set the date, time, and timezone fields to their original values." ],
            "links": [],
            "examples":
              [ { "title": "Reset the vales in an appointment field",
                  "body":
                    [ "$w(\"#myAppointmentField\").reset();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "dateTimeRange",
        "locations":
          [ { "lineno": 248,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "description":
              [ "An object for setting and getting an appointment field's time ranges." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "startDateTime",
              "type": "Date",
              "doc": "Date and time of the start of the range." },
            { "name": "endDateTime",
              "type": "Date",
              "doc": "Date and time of the end of the range." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "dateTimeRangeInfo",
        "locations":
          [ { "lineno": 257,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "description":
              [ "An object for setting and getting an appointment field's time ranges." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "type",
              "type": "string",
              "doc": "Date range type. Valid values: `'enabledRanges'`" },
            { "name": "payload",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "$w.AppointmentField.dateTimeRange" ] },
              "doc": "Array of dateTimeRange objects." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "onViewChangeParams",
        "locations":
          [ { "lineno": 310,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "description":
              [ "An object for setting and getting an appointment field's time ranges." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "operation",
              "type": "Function",
              "doc": "Date and time of the start of the range." },
            { "name": "handler",
              "type": "EventHandler",
              "doc": "Date and time of the end of the range." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true } }